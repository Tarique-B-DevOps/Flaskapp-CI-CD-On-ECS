---
name: "Flask App Deployment Pipeline to ECS Cluster"
on:
 
  push:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  Build_App:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Set tag
        id: vars
        run: echo "::set-output name=tag::${GITHUB_REF#refs/*/}"

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flaskapp
          IMAGE_TAG: ${{ github.event.head_commit.message }}
        run: |
          echo $IMAGE_TAG
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Deploy_App:
    runs-on: "ubuntu-latest"
    needs: [Build_App]
    steps:

      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credential
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1     

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: |
          cd terraform_iac
          terraform init
          

      - name: Terraform Validate
        id: validate
        run: |
          cd terraform_iac        
          terraform validate -no-color
              
      - name: Terraform Plan
        id: plan
        run: |
          cd terraform_iac
          terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Apply
        run: |
          cd terraform_iac
          terraform apply -auto-approve -input=false
